練習
=====================================================

.. toctree::
   :hidden:
   :maxdepth: 4


課後練習
-------------------------------

編程題
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. `***` 實現一個裸機應用程序A，能打印調用棧。
2. `**` 擴展內核，實現新系統調用get_taskinfo，能顯示當前task的id和task name；實現一個裸機應用程序B，能訪問get_taskinfo系統調用。
3. `**` 擴展內核，能夠統計多個應用的執行過程中系統調用編號和訪問此係統調用的次數。
4. `**` 擴展內核，能夠統計每個應用執行後的完成時間。
5. `***` 擴展內核，統計執行異常的程序的異常情況（主要是各種特權級涉及的異常），能夠打印異常程序的出錯的地址和指令等信息。


注：上述編程基於 rcore/ucore tutorial v3: Branch ch2

問答題
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. `*` 函數調用與系統調用有何區別？
2. `**` 為了方便操作系統處理，Ｍ態軟件會將 S 態異常/中斷委託給 S 態軟件，請指出有哪些寄存器記錄了委託信息，rustsbi 委託了哪些異常/中斷？（也可以直接給出寄存器的值）
3. `**` 如果操作系統以應用程序庫的形式存在，應用程序可以通過哪些方式破壞操作系統？
4. `**` 編譯器/操作系統/處理器如何合作，可採用哪些方法來保護操作系統不受應用程序的破壞？
5. `**` RISC-V處理器的S態特權指令有哪些，其大致含義是什麼，有啥作用？
6. `**` RISC-V處理器在用戶態執行特權指令後的硬件層面的處理過程是什麼？
7. `**` 操作系統在完成用戶態<-->內核態雙向切換中的一般處理過程是什麼？
8. `**` 程序陷入內核的原因有中斷、異常和陷入（系統調用），請問 riscv64 支持哪些中斷 / 異常？如何判斷進入內核是由於中斷還是異常？描述陷入內核時的幾個重要寄存器及其值。
9. `*` 在哪些情況下會出現特權級切換：用戶態-->內核態，以及內核態-->用戶態？
10. `**` Trap上下文的含義是啥？在本章的操作系統中，Trap上下文的具體內容是啥？如果不進行Trap上下文的保存於恢復，會出現什麼情況？

實驗練習
-------------------------------

實驗練習包括實踐作業和問答作業兩部分。

實踐作業
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sys_write 安全檢查
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ch2 中，我們實現了第一個系統調用 ``sys_write``，這使得我們可以在用戶態輸出信息。但是 os 在提供服務的同時，還有保護 os 本身以及其他用戶程序不受錯誤或者惡意程序破壞的功能。

由於還沒有實現虛擬內存，我們可以在用戶程序中指定一個屬於其他程序字符串，並將它輸出，這顯然是不合理的，因此我們要對 sys_write 做檢查：

- sys_write 僅能輸出位於程序本身內存空間內的數據，否則報錯。

實驗要求
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 實現分支: ch2-lab
- 目錄要求不變
- 為 sys_write 增加安全檢查

  在 os 目錄下執行 ``make run TEST=1`` 測試 ``sys_write`` 安全檢查的實現，正確執行目標用戶測例，並得到預期輸出（詳見測例註釋）。

  注意：如果設置默認 log 等級，從 lab2 開始關閉所有 log 輸出。

challenge: 支持多核，實現多個核運行用戶程序。

實驗約定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在第二章的測試中，我們對於內核有如下僅僅為了測試方便的要求，請調整你的內核代碼來符合這些要求。

- 用戶棧大小必須為 4096，且按照 4096 字節對齊。這一規定可以在實驗4開始刪除，僅僅為通過 lab2/3 測例設置。

.. _inherit-last-ch-changes:

.. note::

   **如何快速繼承上一章練習題的修改**

   從這一章開始，在完成本章習題之前，首先要做的就是將上一章框架的修改繼承到本章的框架代碼。出於各種原因，實際上通過 ``git merge`` 並不是很方便，這裡給出一種打 patch 的方法，希望能夠有所幫助。

   1. 切換到上一章的分支，通過 ``git log`` 找到你在此分支上的第一次 commit 的前一個 commit 的 ID ，複製其前 8 位，記作 ``base-commit`` 。假設分支上最新的一次 commit ID 是 ``last-commit`` 。
   2. 確保你位於項目根目錄 ``rCore-Tutorial-v3`` 下。通過 ``git diff <base-commit> <last-commit> > <patch-path>`` 即可在 ``patch-path`` 路徑位置（比如 ``~/Desktop/chx.patch`` ）生成一個描述你對於上一章分支進行的全部修改的一個補丁文件。打開看一下，它給出了每個被修改的文件中涉及了哪些塊的修改，還附加了塊前後的若干行代碼。如果想更加靈活進行合併的話，可以通過 ``git format-patch <base-commit>`` 命令在當前目錄下生成一組補丁，它會對於 ``base-commit`` 後面的每一次 commit 均按照順序生成一個補丁。
   3. 切換到本章分支，通過 ``git apply --reject <patch-path>`` 來將一個補丁打到當前章節上。它的大概原理是對於補丁中的每個被修改文件中的每個修改塊，嘗試通過塊的前後若干行代碼來定位它在當前分支上的位置並進行替換。有一些塊可能無法匹配，此時會生成與這些塊所在的文件同名的 ``*.rej`` 文件，描述了哪些塊替換失敗了。在項目根目錄 ``rCore-Tutorial-v3`` 下，可以通過 ``find . -name *.rej`` 來找到所有相關的 ``*.rej`` 文件並手動完成替換。
   4. 在處理完所有 ``*.rej`` 之後，將它們刪除並 commit 一下。現在就可以開始本章的實驗了。 

問答作業
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. 正確進入 U 態後，程序的特徵還應有：使用 S 態特權指令，訪問 S 態寄存器後會報錯。請自行測試這些內容 (運行 Rust 三個 bad 測例 ) ，描述程序出錯行為，註明你使用的 sbi 及其版本。

2. 請結合用例理解 `trap.S <https://github.com/rcore-os/rCore-Tutorial-v3/blob/ch2/os/src/trap/trap.S>`_ 中兩個函數 ``__alltraps`` 和 ``__restore`` 的作用，並回答如下幾個問題:

   1. L40：剛進入 ``__restore`` 時，``a0`` 代表了什麼值。請指出 ``__restore`` 的兩種使用情景。

   2. L46-L51：這幾行彙編代碼特殊處理了哪些寄存器？這些寄存器的的值對於進入用戶態有何意義？請分別解釋。
      
      .. code-block:: riscv

         ld t0, 32*8(sp)
         ld t1, 33*8(sp)
         ld t2, 2*8(sp)
         csrw sstatus, t0
         csrw sepc, t1
         csrw sscratch, t2

   3. L53-L59：為何跳過了 ``x2`` 和 ``x4``？ 

      .. code-block:: riscv

         ld x1, 1*8(sp)
         ld x3, 3*8(sp)
         .set n, 5
         .rept 27
            LOAD_GP %n
            .set n, n+1
         .endr

   4. L63：該指令之後，``sp`` 和 ``sscratch`` 中的值分別有什麼意義？

      .. code-block:: riscv

         csrrw sp, sscratch, sp

   5. ``__restore``：中發生狀態切換在哪一條指令？為何該指令執行之後會進入用戶態？

   6. L13：該指令之後，``sp`` 和 ``sscratch`` 中的值分別有什麼意義？

      .. code-block:: riscv

         csrrw sp, sscratch, sp

   7. 從 U 態進入 S 態是哪一條指令發生的？



3. 對於任何中斷，``__alltraps`` 中都需要保存所有寄存器嗎？你有沒有想到一些加速 ``__alltraps`` 的方法？簡單描述你的想法。

實驗練習的提交報告要求
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 簡單總結與上次實驗相比本次實驗你增加的東西（控制在5行以內，不要貼代碼）。
- 完成問答問題。
- (optional) 你對本次實驗設計及難度/工作量的看法，以及有哪些需要改進的地方，歡迎暢所欲言。


