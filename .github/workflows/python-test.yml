name: Python Trading Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC (10 AM Taiwan time)
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio pytest-timeout
        pip install flake8 black mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,docs,build,dist,.venv
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=.git,__pycache__,docs,build,dist,.venv
    
    - name: Format check with black
      run: |
        black --check --diff . --exclude=".git|__pycache__|docs|build|dist|.venv" || true
    
    - name: Run unit tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        # Find and run all test files
        pytest -v --tb=short --timeout=300 \
          --ignore=data \
          --ignore=historical_data \
          --ignore=backtest_results \
          --ignore=.venv \
          || true
    
    - name: Test imports
      run: |
        # Test that key modules can be imported
        python -c "import pandas, numpy, redis" || true
    
    - name: Security check
      run: |
        # Check for hardcoded secrets
        grep -r "api_key\|api_secret\|password\|token" --include="*.py" . | grep -v "#" | grep -v "example" | grep -v "config" || true

  backtest:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install trading dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scipy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run sample backtest
      run: |
        echo "Backtest validation would run here"
        # python Jlab/finlab/backtest_sample.py --paper || true

  notify:
    runs-on: ubuntu-latest
    needs: [test, backtest]
    if: always()
    
    steps:
    - name: Notify status
      run: |
        echo "Tests completed with status: ${{ needs.test.result }}"
        echo "Backtest completed with status: ${{ needs.backtest.result }}"