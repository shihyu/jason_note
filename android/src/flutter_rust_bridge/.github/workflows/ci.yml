name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check Rust formatting
      run: cargo fmt -- --check
      
    - name: Run Rust linting
      run: cargo clippy -- -D warnings
      
    - name: Run Rust tests
      run: make test-rust
      
    - name: Build Rust release
      run: make build-rust
      
    - name: Check build size
      run: make size-check

  flutter-tests:
    name: Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        
    - name: Install Flutter dependencies
      run: make flutter-deps
      
    - name: Run Flutter analyze
      run: cd flutter_app && flutter analyze
      
    - name: Check Flutter formatting
      run: cd flutter_app && dart format --set-exit-if-changed .
      
    - name: Run Flutter tests
      run: make test-flutter

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build and test integration
      run: make install
      
    - name: Run benchmark tests
      run: make benchmark

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: make security-audit

  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi
        
    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-android-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build Android libraries
      run: |
        make build-android-arm64
        make build-android-arm
        
    - name: Build Android APK
      run: make android-build
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: flutter_app/build/app/outputs/flutter-apk/*.apk

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: make docker-build
      
    - name: Test in Docker
      run: make docker-test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [android-build, docker-build]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸš€ Automated release from CI/CD pipeline
          
          ## Changes
          ${{ github.event.head_commit.message }}
          
          ## Artifacts
          - Android APK
          - Rust libraries
          - Docker image
        draft: false
        prerelease: false