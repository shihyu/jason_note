練習
================================================

課後練習
-------------------------------

編程題
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. `*` 擴展easy-fs文件系統功能，擴大單個文件的大小,支持三重間接inode。
2. `*` 擴展內核功能，支持stat系統調用，能顯示文件的inode元數據信息。
3. `**` 擴展內核功能，支持mmap系統調用，支持對文件的映射，實現基於內存讀寫方式的文件讀寫功能。
4. `**` 擴展easy-fs文件系統功能，支持二級目錄結構。可擴展：支持N級目錄結構。
5. `***` 擴展easy-fs文件系統功能，通過日誌機制支持crash一致性。

問答題
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. `*` 文件系統的功能是什麼？
2. `**` 目前的文件系統只有單級目錄，假設想要支持多級文件目錄，請描述你設想的實現方式，描述合理即可。
3. `**` 軟鏈接和硬鏈接是幹什麼的？有什麼區別？當刪除一個軟鏈接或硬鏈接時分別會發生什麼？
4. `***` 在有了多級目錄之後，我們就也可以為一個目錄增加硬鏈接了。在這種情況下，文件樹中是否可能出現環路(軟硬鏈接都可以，鼓勵多嘗試)？你認為應該如何解決？請在你喜歡的系統上實現一個環路，描述你的實現方式以及系統提示、實際測試結果。
5. `*` 目錄是一類特殊的文件，存放的是什麼內容？用戶可以自己修改目錄內容嗎？
6. `**` 在實際操作系統中，如Linux，為什麼會存在大量的文件系統類型？
7. `**` 可以把文件控制塊放到目錄項中嗎？這樣做有什麼優缺點？
8. `**` 為什麼要同時維護進程的打開文件表和操作系統的打開文件表？這兩個打開文件表有什麼區別和聯繫？
9. `**` 文件分配的三種方式是如何組織文件數據塊的？各有什麼特徵（存儲、文件讀寫、可靠性）？
10. `**` 如果一個程序打開了一個文件，寫入了一些數據，但是沒有及時關閉，可能會有什麼後果？如果打開文件後，又進一步發出了讀文件的系統調用，操作系統中各個組件是如何相互協作完成整個讀文件的系統調用的？
11. `***` 文件系統是一個操作系統必要的組件嗎？是否可以將文件系統放到用戶態？這樣做有什麼好處？操作系統需要提供哪些基本支持？

實驗練習
-------------------------------

實驗練習包括實踐作業和問答作業兩部分。

**理解文件系統比較費事，編程難度適中** 
 
實踐作業
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

硬鏈接
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

硬鏈接要求兩個不同的目錄項指向同一個文件，在我們的文件系統中也就是兩個不同名稱目錄項指向同一個磁盤塊。

本節要求實現三個系統調用 ``sys_linkat、sys_unlinkat、sys_stat`` 。
  
**linkat**：

    * syscall ID: 37
    * 功能：創建一個文件的一個硬鏈接， `linkat標準接口 <https://linux.die.net/man/2/linkat>`_ 。
    * Ｃ接口： ``int linkat(int olddirfd, char* oldpath, int newdirfd, char* newpath, unsigned int flags)``
    * Rust 接口： ``fn linkat(olddirfd: i32, oldpath: *const u8, newdirfd: i32, newpath: *const u8, flags: u32) -> i32``
    * 參數：
        * olddirfd，newdirfd: 僅為了兼容性考慮，本次實驗中始終為 AT_FDCWD (-100)，可以忽略。
        * flags: 僅為了兼容性考慮，本次實驗中始終為 0，可以忽略。
        * oldpath：原有文件路徑
        * newpath: 新的鏈接文件路徑。
    * 說明：
        * 為了方便，不考慮新文件路徑已經存在的情況（屬於未定義行為），除非鏈接同名文件。
        * 返回值：如果出現了錯誤則返回 -1，否則返回 0。
    * 可能的錯誤
        * 鏈接同名文件。

**unlinkat**:

    * syscall ID: 35
    * 功能：取消一個文件路徑到文件的鏈接, `unlinkat標準接口 <https://linux.die.net/man/2/unlinkat>`_ 。
    * Ｃ接口： ``int unlinkat(int dirfd, char* path, unsigned int flags)``
    * Rust 接口： ``fn unlinkat(dirfd: i32, path: *const u8, flags: u32) -> i32``
    * 參數：
        * dirfd: 僅為了兼容性考慮，本次實驗中始終為 AT_FDCWD (-100)，可以忽略。
        * flags: 僅為了兼容性考慮，本次實驗中始終為 0，可以忽略。
        * path：文件路徑。
    * 說明：
        * 為了方便，不考慮使用 unlink 徹底刪除文件的情況。
    * 返回值：如果出現了錯誤則返回 -1，否則返回 0。
    * 可能的錯誤
        * 文件不存在。

**fstat**:

    * syscall ID: 80
    * 功能：獲取文件狀態。
    * Ｃ接口： ``int fstat(int fd, struct Stat* st)``
    * Rust 接口： ``fn fstat(fd: i32, st: *mut Stat) -> i32``
    * 參數：
        * fd: 文件描述符
        * st: 文件狀態結構體

        .. code-block:: rust

            #[repr(C)]
            #[derive(Debug)]
            pub struct Stat {
                /// 文件所在磁盤驅動器號，該實驗中寫死為 0 即可
                pub dev: u64,
                /// inode 文件所在 inode 編號
                pub ino: u64,
                /// 文件類型
                pub mode: StatMode,
                /// 硬鏈接數量，初始為1
                pub nlink: u32,
                /// 無需考慮，為了兼容性設計
                pad: [u64; 7],
            }
            
            /// StatMode 定義：
            bitflags! {
                pub struct StatMode: u32 {
                    const NULL  = 0;
                    /// directory
                    const DIR   = 0o040000;
                    /// ordinary regular file
                    const FILE  = 0o100000;
                }
            }
        

實驗要求
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 實現分支：ch7-lab
- 實驗目錄要求不變
- 通過所有測例

  在 os 目錄下 ``make run TEST=1`` 加載所有測例， ``test_usertest`` 打包了所有你需要通過的測例，你也可以通過修改這個文件調整本地測試的內容。

  你的內核必須前向兼容，能通過前一章的所有測例。

.. note::

    **如何調試 easy-fs**

    如果你在第一章練習題中已經藉助 ``log`` crate 實現了日誌功能，那麼你可以直接在 ``easy-fs`` 中引入 ``log`` crate，通過 ``log::info!/debug!`` 等宏即可進行調試並在內核中看到日誌輸出。具體來說，在 ``easy-fs`` 中的修改是：在 ``easy-fs/Cargo.toml`` 的依賴中加入一行 ``log = "0.4.0"``，然後在 ``easy-fs/src/lib.rs`` 中加入一行 ``extern crate log`` 。

    你也可以完全在用戶態進行調試。仿照 ``easy-fs-fuse`` 建立一個在當前操作系統中運行的應用程序，將測試邏輯寫在 ``main`` 函數中。這個時候就可以將它引用的 ``easy-fs`` 的 ``no_std`` 去掉並使用 ``println!`` 進行調試。


問答作業
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

無

實驗練習的提交報告要求
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* 簡單總結本次實驗與上個實驗相比你增加的東西。（控制在5行以內，不要貼代碼）
* 完成問答問題
* (optional) 你對本次實驗設計及難度的看法。