1. 需要配置go语言环境
2. vim版本 > 8，并且支持python3
3. 安装plugin
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
编辑~/.vimrc如下：

"==============================================================================
" vim 内置配置
"==============================================================================

" 设置 vimrc 修改保存后立刻生效，不用在重新打开
" 建议配置完成后将这个关闭，否则配置多了之后会很卡
" autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 关闭兼容模式
set nocompatible

set encoding=utf-8
set number " 设置行号
set cursorline "突出显示当前行
" set cursorcolumn " 突出显示当前列
set showmatch " 显示括号匹配
set completeopt-=preview

" tab 缩进
set tabstop=4 " 设置Tab长度为4空格
set shiftwidth=4 " 设置自动缩进长度为4空格
set autoindent " 继承前一行的缩进方式，适用于多行注释
" set tags=./tags,tags;$HOME
" set tags=./.tags;,.tags

" 识别鼠标点击
" set mouse=a

" 高亮显示搜索
set hlsearch
" 开启实时搜索
set incsearch
" 搜索时大小写不敏感
set ignorecase

" 定义快捷键的前缀，即<Leader>
let mapleader=";"

syntax enable
syntax on                    " 开启文件类型侦测
filetype plugin indent on    " 启用自动补全

" 允许空格键和光标键跨越行边界"
" set whichwrap+=<,>,h,l

" make backspace work like most other apps
set backspace=2

" 退出插入模式指定类型的文件自动保存
" au InsertLeave *.go,*.sh,*.php write

"==============================================================================
" 插件配置
"==============================================================================

" 插件开始的位置
call plug#begin('~/.vim/plugged')

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" 可以快速对齐的插件
Plug 'junegunn/vim-easy-align'

" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'

" 可以使 nerdtree Tab 标签的名称更友好些
Plug 'jistr/vim-nerdtree-tabs'

" 可以在导航目录中看到 git 版本信息
Plug 'Xuyuanp/nerdtree-git-plugin'

" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'

" 自动补全括号的插件，包括小括号，中括号，以及花括号
Plug 'jiangmiao/auto-pairs'

" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'

" 代码自动完成，安装完插件还需要额外配置才可以使用
Plug 'Valloric/YouCompleteMe'

" 可以在文档中显示 git 信息
Plug 'airblade/vim-gitgutter'

" lsp安装
" Plug 'prabirshrestha/vim-lsp'
" Plug 'mattn/vim-lsp-settings'

"" 下面两个插件要配合使用，可以自动生成代码块
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" 配色方案
" colorscheme neodark
" Plug 'KeitaNakamura/neodark.vim'
" colorscheme monokai
" Plug 'crusoexia/vim-monokai'
" colorscheme github
" Plug 'acarapetis/vim-colors-github'
" colorscheme one
Plug 'rakr/vim-one'

" go 主要插件
Plug 'fatih/vim-go', { 'tag': '*' }

" go 中的代码追踪，输入 gd 就可以自动跳转
" Plug 'dgryski/vim-godef'

" markdown 插件
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" 查找ag
Plug 'epmatsw/ag.vim'

" Plug 'mileszs/ack.vim'

" Plug 'brooth/far.vim'

" gtags 插件
Plug 'skywind3000/gutentags_plus'
Plug 'ludovicchabant/vim-gutentags'

" p4 插件
" Plug 'ngemily/vim-vp4'
" Plug 'rightson/vim-p4-syntax'
" Plug 'dex/p4.vim'

" 插件结束的位置，插件全部放在此行上面
call plug#end()


"==============================================================================
" 主题配色
"==============================================================================

" 开启24bit的颜色，开启这个颜色会更漂亮一些
" set termguicolors
" 配色方案, 可以从上面插件安装中的选择一个使用
" colorscheme one " 主题
set background=dark " 主题背景 dark-深色; light-浅色

"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:godef_split=2

"==============================================================================
" NERDTree 插件
"==============================================================================

" 打开和关闭NERDTree快捷键
map <F11> :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=0
" 打开文件时是否显示目录
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
" let NERDTreeWinSize=31
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开vim 文件显示文件路径
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
" let g:nerdtree_tabs_open_on_console_startup=1

" let NERDTreeMapOpenInTab='<ENTER>'


"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
nmap <F12> :TagbarToggle<CR>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" autocmd FileType python,c,cpp,go TagbarOpen

"==============================================================================
"  nerdtree-git-plugin 插件
"==============================================================================
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeGitStatusShowIgnored = 1



"==============================================================================
"  Valloric/YouCompleteMe 插件
"==============================================================================

" make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<space>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'

let g:ycm_key_list_select_completion = ['<C-n>']
let g:ycm_key_list_previous_completion = ['<C-p>']
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:SuperTabClosePreviewOnPopupClose = 1

" better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"
" if executable('pyls')
"     " pip install python-language-server
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'pyls',
"         \ 'cmd': {server_info->['pyls']},
"         \ 'allowlist': ['python'],
"         \ })
" endif
"
"==============================================================================
"  lsp 插件
"==============================================================================
"
" function! s:on_lsp_buffer_enabled() abort
"     setlocal omnifunc=lsp#complete
"     setlocal signcolumn=yes
"     if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
"     nmap <buffer> gd <plug>(lsp-definition)
"     nmap <buffer> gs <plug>(lsp-document-symbol-search)
"     nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
"     nmap <buffer> gr <plug>(lsp-references)
"     nmap <buffer> gi <plug>(lsp-implementation)
"     nmap <buffer> gt <plug>(lsp-type-definition)
"     nmap <buffer> <leader>rn <plug>(lsp-rename)
"     nmap <buffer> [g <plug>(lsp-previous-diagnostic)
"     nmap <buffer> ]g <plug>(lsp-next-diagnostic)
"     nmap <buffer> K <plug>(lsp-hover)
"     nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
"     nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
"
"     let g:lsp_format_sync_timeout = 1000
"     autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
"
"     " refer to doc to add more commands
" endfunction
"
" augroup lsp_install
"     au!
"     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
"     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
" augroup END
"
"==============================================================================
"  其他插件配置
"==============================================================================

" markdwon 的快捷键
map <silent> <F5> <Plug>MarkdownPreview
map <silent> <F6> <Plug>StopMarkdownPreview

" tab 标签页切换快捷键
:nn <Leader>1 1gt
:nn <Leader>2 2gt
:nn <Leader>3 3gt
:nn <Leader>4 4gt
:nn <Leader>5 5gt
:nn <Leader>6 6gt
:nn <Leader>7 7gt
:nn <Leader>8 8gt
:nn <Leader>9 8gt
:nn <Leader>0 :tablast<CR>


"==============================================================================
" gtags配置
"==============================================================================

let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'

" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args = ['--fields=+niazS']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
" let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

let g:gutentags_define_advanced_commands = 1

" ==============================================================================
"  GVim 的配置
" ==============================================================================
"  如果不使用 GVim ，可以不用配置下面的配置
"  if has('gui_running')
"          colorscheme one
"      " 设置启动时窗口的大小
"      set lines=999 columns=999 linespace=4
"
"      " 设置字体及大小
"      set guifont=Roboto\ Mono\ 13
"
"      set guioptions-=m " 隐藏菜单栏
"      set guioptions-=T " 隐藏工具栏
"      set guioptions-=L " 隐藏左侧滚动条
"      set guioptions-=r " 隐藏右侧滚动条
"      set guioptions-=b " 隐藏底部滚动条
"      " 在 gvim 下不会和 terminal 的 alt+数字的快捷键冲突，
"      " 所以将 tab 切换配置一份 alt+数字的快捷键
"      :nn <M-1> 1gt
"      :nn <M-2> 2gt
"      :nn <M-3> 3gt
"      :nn <M-4> 4gt
"      :nn <M-5> 5gt
"      :nn <M-7> 6gt
"      :nn <M-9> 7gt
"      :nn <M-10> 8gt
"      :nn <M-10> 9gt
"      :nn <M-0> :tablast<CR>
"  endif

"==============================================================================
" ag 配置
"==============================================================================
let g:ag_working_path_mode="r"
let g:ag_prg="ag --column --nogroup --noheading"

" ==============================================================================
" nmap配置
" ==============================================================================

" 系统剪切板复制粘贴
" v 模式下复制内容到系统剪切板
" vmap <Leader>c "+y
" n 模式下复制一行到系统剪切板
" nmap <Leader>c "+yy
" n 模式下粘贴系统剪切板的内容
" nmap <Leader>v "+p
" imap <Leader>v "+p

" 保存文件
" nmap <Leader>w :w!<cr>
" imap <Leader>w <esc>:w!<cr>

" 退出文件
" nmap <Leader>q :q!<cr>
" imap <Leader>q <esc>:q!<cr>

" 进入函数
" nmap <Leader>e <C-]>
" nmap <Leader>r <C-t>

" 上下翻页
" nmap <Leader>f <C-f>
" nmap <Leader>b <C-b>

" 分屏
" nmap <Leader>v <C-w>v
" nmap <Leader>s <C-w>s

" 移动光标
" nmap <C-h> <C-w>h
" nmap <C-j> <C-w>j
" nmap <C-k> <C-w>k
" nmap <C-l> <C-w>l
" nmap <C-m> <C-w>w

" 光标回到上一次
" nmap <Leader>t <C-o>

" 跳转定义
" nmap <Leader>p gd
" nmap <Leader>n gD

" 查找下一个
" noremap <silent> <leader>n * <C-R><C-W><cr>

" 全局选中
" nmap <Leader>a ggVG

" 跳到最后一次修改的位置, 也可使用g;
" nmap <Leader>m `.

" 跳到行尾
" nmap 9 g_
" 向下查找
" nmap 8 *
" 向上查找
" nmap 3 #

" 移动窗口
" nmap <Leader>h <C-w>H
" nmap <Leader>j <C-w>J
" nmap <Leader>k <C-w>K
" nmap <Leader>l <C-w>L

" 调整窗口宽度
" nmap <leader>[ <C-w><
" nmap <leader>] <C-w>>
" 调整窗口高度
" nmap <C-u> <C-w>-
" nmap <C-y> <C-w>+

" 不能映射<C-m>, 回车会失效

nmap <leader>g :Ag! -w
" 全局ag
noremap <silent> <leader>s :Ag! <C-R><C-W><cr>
" 单词查找
" noremap <silent> <leader>w :Ag -w <C-R><C-W><cr>
" 选中区域查找
" vnoremap <silent> <leader>q y:Ag -Q "<C-R>=escape(@",'/\')<CR>"<CR>
" 查找光标下符号的引用
" noremap <silent> <leader>s :GscopeFind s <C-R><C-W><cr> :copen 10<CR><CR>
" 查找光标下符号的定义
" noremap <silent> <leader>d :GscopeFind g <C-R><C-W><cr> :copen 10<CR><CR>
" 查找调用此函数的函数
" noremap <silent> <leader>r :GscopeFind c <C-R><C-W><cr> :copen 10<CR><CR>
" 查找此函数调用的函数
" noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
" 查找光标下的字符串
" noremap <silent> <leader>t :GscopeFind t <C-R><C-W><cr>
" 查找光标下egrep模式
" noremap <silent> <leader>g :GscopeFind e <C-R><C-W><cr> :copen 10<CR><CR>
" 查找光标下的文件名
noremap <silent> <leader>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
" 查找包括光标下的文件名的文件
" noremap <silent> <leader>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr> :copen 10<CR><CR>
" 查找分配当前符号的位置
" noremap <silent> <leader>a :GscopeFind a <C-R><C-W><cr> :copen 10<CR><CR>
" 在ctags数据库中查找当前单词
" noremap <silent> <leader>z :GscopeFind z <C-R><C-W><cr> :copen 10<CR><CR>
" 选中区域进行查找
" vnoremap <leader>x y:GscopeFind e <C-R>=escape(@",'/\')<CR><CR> :copen 10<CR><CR>
然后输入 :w 保存配置，在输入 :PlugInstall ，如下：

:w
:PlugInstall
插件会自动下载安装，看见上面显示 Finishing … Done 的内容，插件安装成功

参考链接：https://learnku.com/articles/24924

