bin/test-c: 沒有此一檔案或目錄.
No symbol table is loaded.  Use the "file" command.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
No executable file specified.
Use the "file" or "exec-file" command.
No breakpoints, watchpoints, tracepoints, or catchpoints.
No stack.

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) [answered N; input not from terminal]
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
Breakpoint 1 at 0x1040
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, 0x0000555555555040 in main ()
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000555555555040 <main>
	breakpoint already hit 1 time
#0  0x0000555555555040 in main ()
rax            0x555555555040      93824992235584
rbx            0x7fffffffdd48      140737488346440
rcx            0x555555557de8      93824992247272
rdx            0x7fffffffdd58      140737488346456
rsi            0x7fffffffdd48      140737488346440
rdi            0x1                 1
rbp            0x7fffffffdcc0      0x7fffffffdcc0
rsp            0x7fffffffdc28      0x7fffffffdc28
r8             0x0                 0
r9             0x7ffff7fca380      140737353917312
r10            0x7fffffffd940      140737488345408
r11            0x203               515
r12            0x1                 1
r13            0x0                 0
r14            0x555555557de8      93824992247272
r15            0x7ffff7ffd000      140737354125312
rip            0x555555555040      0x555555555040 <main>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
k0             0x10000000          268435456
k1             0x220802            2230274
k2             0x0                 0
k3             0x0                 0
k4             0x0                 0
k5             0x0                 0
k6             0x0                 0
k7             0x0                 0
fs_base        0x7ffff7fa4740      140737353762624
gs_base        0x0                 0
A debugging session is active.

	Inferior 1 [process 3481917] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) [answered N; input not from terminal]
Debuginfod has been disabled.
To make this setting permanent, add 'set debuginfod enabled off' to .gdbinit.
Breakpoint 1 at 0x27b0
No symbol table is loaded.  Use the "file" command.
All defined functions:

Non-debugging symbols:
0x0000000000002000  _init
0x0000000000002370  __cxa_finalize@plt
0x0000000000002380  __printf_chk@plt
0x0000000000002390  __errno_location@plt
0x00000000000023a0  llama_context_default_params@plt
0x00000000000023b0  llama_model_load_from_file@plt
0x00000000000023c0  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt
0x00000000000023d0  llama_model_free@plt
0x00000000000023e0  llama_vocab_is_eog@plt
0x00000000000023f0  __cxa_begin_catch@plt
0x0000000000002400  llama_free@plt
0x0000000000002410  strlen@plt
0x0000000000002420  std::__throw_length_error(char const*)@plt
0x0000000000002430  llama_sampler_chain_init@plt
0x0000000000002440  memset@plt
0x0000000000002450  llama_perf_sampler_print@plt
0x0000000000002460  std::__throw_invalid_argument(char const*)@plt
0x0000000000002470  llama_init_from_model@plt
0x0000000000002480  std::__throw_logic_error(char const*)@plt
0x0000000000002490  memcpy@plt
0x00000000000024a0  llama_sampler_free@plt
0x00000000000024b0  llama_vocab_bos@plt
0x00000000000024c0  llama_token_to_piece@plt
0x00000000000024d0  llama_sampler_sample@plt
0x00000000000024e0  llama_encode@plt
0x00000000000024f0  ggml_backend_load_all@plt
0x0000000000002500  operator new(unsigned long)@plt
0x0000000000002510  llama_perf_context_print@plt
0x0000000000002520  operator delete(void*, unsigned long)@plt
0x0000000000002530  llama_sampler_chain_add@plt
0x0000000000002540  __stack_chk_fail@plt
0x0000000000002550  llama_sampler_init_greedy@plt
0x0000000000002560  fflush@plt
0x0000000000002570  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt
0x0000000000002580  fputc@plt
0x0000000000002590  llama_model_decoder_start_token@plt
0x00000000000025a0  llama_batch_get_one@plt
0x00000000000025b0  putchar@plt
0x00000000000025c0  strcmp@plt
0x00000000000025d0  std::__throw_out_of_range(char const*)@plt
0x00000000000025e0  llama_sampler_chain_default_params@plt
0x00000000000025f0  puts@plt
0x0000000000002600  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt
0x0000000000002610  llama_decode@plt
0x0000000000002620  __cxa_end_catch@plt
0x0000000000002630  __fprintf_chk@plt
0x0000000000002640  llama_model_default_params@plt
0x0000000000002650  llama_model_has_encoder@plt
0x0000000000002660  ggml_time_us@plt
0x0000000000002670  _Unwind_Resume@plt
0x0000000000002680  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt
0x0000000000002690  llama_tokenize@plt
0x00000000000026a0  llama_model_get_vocab@plt
0x00000000000026b0  __isoc23_strtol@plt
0x00000000000026c0  main[cold]
0x00000000000027b0  main
0x0000000000003720  _start
0x0000000000003750  deregister_tm_clones
0x0000000000003780  register_tm_clones
0x00000000000037c0  __do_global_dtors_aux
0x0000000000003800  frame_dummy
0x0000000000003810  print_usage(int, char**) [clone .isra.0]
0x0000000000003850  std::vector<int, std::allocator<int> >::~vector()
0x0000000000003850  std::vector<int, std::allocator<int> >::~vector()
0x0000000000003874  _fini
